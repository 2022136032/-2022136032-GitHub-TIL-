## 1. 플러터 아키텍처

### 📊 3계층 구조
```
┌─────────────────────────────┐
│   Framework (Dart)          │ ← 앱 개발자가 주로 사용
├─────────────────────────────┤
│   Engine (C/C++)            │ ← 렌더링과 코어 기능
├─────────────────────────────┤
│   Embedder (Platform)       │ ← 플랫폼별 구현
└─────────────────────────────┘
```

### 주요 구성 요소

1. 임베더 (Embedder)
각 플랫폼별 네이티브 코드(Android: Java/C++, iOS: Objective-C)
화면 렌더링 이벤트처리 접근성기능 제공

2. 엔진 (Engine)
C++로 작성된 핵심 렌더링 엔진
Skia 그래픽 라이브러리 활용
파일/네트워크 I/O, 텍스트 레이아웃 처리

3.프레임워크 (Framework)
Dart로 작성된 반응형 UI 프레임워크
Material/Cupertino 디자인 시스템
위젯 시스템과 상태 관리

### 3가지 기본 위젯
1.불변위젯
2.가변위젯
3.사용자 상호작용, 동적 ui, 애니메이션

#### 주요 메서드 역할
| 메서드 | 호출 시점 | 용도 |
|--------|-----------|------|
| `initState()` | 위젯 생성 시 1회 | 초기화 작업 |
| `didChangeDependencies()` | initState 후 1회 | context 접근 필요한 초기화 |
| `build()` | UI 갱신 필요 시 | UI 구성 |
| `setState()` | 상태 변경 시 | 화면 갱신 트리거 |
| `didUpdateWidget()` | 부모 위젯 변경 시 | 이전/현재 값 비교 |
| `dispose()` | 위젯 제거 시 | 리소스 정리 |
